// src/utils/FirestoreOfflineHandler.ts
import { FirestoreError } from 'firebase/firestore';
import { connectivityManager } from './ConnectivityManager';

/**
 * Utilitaire pour g√©rer les op√©rations Firestore avec une meilleure gestion du mode hors ligne
 */
export class FirestoreOfflineHandler {
  /**
   * V√©rifie si une erreur Firestore est li√©e √† un probl√®me de connectivit√©
   */
  static isOfflineError(error: any): boolean {
    // Liste √©tendue des codes d'erreur li√©s √† la connectivit√©
    const offlineErrorCodes = [
      'unavailable', 
      'failed-precondition',
      'resource-exhausted',
      'deadline-exceeded',
      'cancelled'
    ];
    
    // Liste des messages d'erreur courants li√©s √† la connectivit√©
    const offlineErrorMessages = [
      'offline', 
      'network error', 
      'failed to get document because the client is offline',
      'internal error', 
      'timeout', 
      'connection'
    ];
    
    // V√©rifier si l'erreur est li√©e √† un probl√®me de connexion
    return (
      offlineErrorCodes.includes(error.code) || 
      offlineErrorMessages.some(msg => error.message?.toLowerCase().includes(msg))
    );
  }

  /**
   * Ex√©cute une op√©ration Firestore avec gestion optimis√©e du mode hors ligne
   * @param operation La fonction Firestore √† ex√©cuter
   * @param fallback Valeur √† retourner en cas d'erreur li√©e au mode hors ligne (optionnel)
   * @param retryCount Nombre de tentatives (d√©faut: 1)
   */
  static async executeWithOfflineHandling<T>(
    operation: () => Promise<T>,
    fallback?: T,
    retryCount: number = 1
  ): Promise<T> {
    try {
      // V√©rifier la connexion avant d'essayer
      const connectivityStatus = connectivityManager.getStatus();
      
      // Si on sait qu'on est hors ligne et qu'un fallback est fourni, retourner directement le fallback
      if (!connectivityStatus.isConnected && fallback !== undefined) {
        console.log('üì± Mode hors ligne d√©tect√©, utilisation des donn√©es de secours');
        return fallback;
      }
      
      // Tenter l'op√©ration
      return await operation();
    } catch (error: any) {
      console.warn('‚ö†Ô∏è Erreur lors de l\'op√©ration Firestore:', error.code || error.message);
      
      // Si c'est une erreur de connectivit√©
      if (this.isOfflineError(error)) {
        console.log('üì° Erreur de connectivit√© d√©tect√©e lors de l\'acc√®s √† Firestore');
        
        // Tenter une reconnexion en arri√®re-plan
        connectivityManager.forceReconnect();
        
        // Si un fallback est fourni, le retourner
        if (fallback !== undefined) {
          console.log('üì± Utilisation des donn√©es de secours en mode hors ligne');
          return fallback;
        }
        
        // Sinon, si on a encore des tentatives, attendre et r√©essayer
        if (retryCount > 0) {
          console.log(`üîÑ Nouvelle tentative (${retryCount} restante(s))...`);
          await new Promise(resolve => setTimeout(resolve, 1000)); // Attendre 1s
          return this.executeWithOfflineHandling(operation, fallback, retryCount - 1);
        }
      }
      
      // Si ce n'est pas une erreur de connectivit√© ou si on a √©puis√© les tentatives, propager l'erreur
      throw error;
    }
  }

  /**
   * Cr√©e un message d'erreur plus convivial pour les erreurs Firestore
   */
  static getErrorMessage(error: FirestoreError): string {
    if (this.isOfflineError(error)) {
      return "Impossible d'acc√©der aux donn√©es. V√©rifiez votre connexion Internet et r√©essayez.";
    }
    
    // Messages personnalis√©s pour les erreurs Firestore courantes
    switch(error.code) {
      case 'permission-denied':
        return "Vous n'avez pas les permissions n√©cessaires pour acc√©der √† ces donn√©es.";
      case 'not-found':
        return "Les donn√©es demand√©es n'existent pas.";
      case 'already-exists':
        return "Ces donn√©es existent d√©j√†.";
      default:
        return error.message;
    }
  }
}
